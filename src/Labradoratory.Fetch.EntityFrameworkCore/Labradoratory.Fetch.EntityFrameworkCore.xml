<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Labradoratory.Fetch.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1">
            <summary>
            An implementation of <see cref="T:Labradoratory.Fetch.IAsyncQueryResolver`1"/> that targets Entity Framework Core.
            </summary>
            <typeparam name="T">The type of value being resolved.</typeparam>
            <seealso cref="T:Labradoratory.Fetch.IAsyncQueryResolver`1" />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1"/> class.
            </summary>
            <param name="query">The query to resolve asynchronously.</param>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.AnyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.CountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.FirstAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.SingleAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreAsyncQueryResolver`1.ToListAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar">
            <summary>
            A class for registering a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> with the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </summary>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar"/> class.
            </summary>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="P:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.ServiceCollection">
            <summary>
            Gets the service collection.
            </summary>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``1(System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </param>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``1(System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
                <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </param>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``2(System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
            <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </param>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``2(Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
            <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar.AddDbContext``2(System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
                <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
            </summary>
            <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
            <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
            </param>
            <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
            <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2">
            <summary>
            A default implementation of <see cref="T:Labradoratory.Fetch.Repository`1"/> targting the 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> handling the entity.</typeparam>
            <seealso cref="T:Labradoratory.Fetch.Repository`1" />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.#ctor(`1,Labradoratory.Fetch.Processors.ProcessorPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="processorPipeline">The processor pipeline.</param>
        </member>
        <member name="P:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.Context">
            <summary>
            The context to use to access the database.
            </summary>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.Get">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.GetAsyncQueryResolver``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.ExecuteAddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.ExecuteDeleteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2.ExecuteUpdateAsync(`0,Labradoratory.Fetch.ChangeTracking.ChangeSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1">
            <summary>
            A class to help register Fetch repositories that target Microsoft's Entity Framework Core.
            </summary>
            <typeparam name="TContext">The type of the context to register the repository with.</typeparam>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1"/> class.
            </summary>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1.RegisterRepository``1">
            <summary>
            Registers a default <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepository`2"/> for the specified entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1"/>.</returns>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1.RegisterRepository``2">
            <summary>
            Registers a repository of type <typeparamref name="TRepository"/> for the specified entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TRepository">The type of the repository.</typeparam>
            <returns>The <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreRepositoryRegistrar`1"/>.</returns>
            <remarks>
            <para>This method also registers the repository as <see cref="T:Labradoratory.Fetch.Repository`1"/>.</para>
            </remarks>
        </member>
        <member name="T:Labradoratory.Fetch.EntityFrameworkCore.Extensions.IServiceCollectionExtensions">
            <summary>
            Methods to make working with <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> a little easier.
            </summary>
        </member>
        <member name="M:Labradoratory.Fetch.EntityFrameworkCore.Extensions.IServiceCollectionExtensions.AddFetchForEntityFrameworkCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the depedencies for the Fetch library targetting Entity Framework Core.
            </summary>
            <param name="serviceCollection">The service collection.</param>
            <returns>A <see cref="T:Labradoratory.Fetch.EntityFrameworkCore.EntityFrameworkCoreDbContextRegistrar"/> which can be used to register <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.</returns>
        </member>
    </members>
</doc>
